import { toast } from 'react-toastify';

class MessageLibraryService {
  constructor() {
    const { ApperClient } = window.ApperSDK;
    this.apperClient = new ApperClient({
      apperProjectId: import.meta.env.VITE_APPER_PROJECT_ID,
      apperPublicKey: import.meta.env.VITE_APPER_PUBLIC_KEY
    });
    this.tableName = 'message_library_c';
  }

  async getAll() {
    try {
      const params = {
        fields: [
          { field: { Name: "Name" } },
          { field: { Name: "Tags" } },
          { field: { Name: "message_text_c" } },
          { field: { Name: "occasion_c" } },
          { field: { Name: "language_c" } },
          { field: { Name: "tone_c" } },
          { field: { Name: "created_at_c" } }
        ],
        orderBy: [
          { fieldName: "created_at_c", sorttype: "DESC" }
        ]
      };

      const response = await this.apperClient.fetchRecords(this.tableName, params);
      
      if (!response.success) {
        console.error(response.message);
        toast.error(response.message);
        return [];
      }

      return response.data || [];
    } catch (error) {
      if (error?.response?.data?.message) {
        console.error("Error fetching messages:", error?.response?.data?.message);
      } else {
        console.error(error);
      }
      return [];
    }
  }

  async getById(id) {
    try {
      const params = {
        fields: [
          { field: { Name: "Name" } },
          { field: { Name: "Tags" } },
          { field: { Name: "message_text_c" } },
          { field: { Name: "occasion_c" } },
          { field: { Name: "language_c" } },
          { field: { Name: "tone_c" } },
          { field: { Name: "created_at_c" } }
        ]
      };

      const response = await this.apperClient.getRecordById(this.tableName, parseInt(id), params);
      
      if (!response.success) {
        console.error(response.message);
        toast.error(response.message);
        return null;
      }

      return response.data;
    } catch (error) {
      if (error?.response?.data?.message) {
        console.error(`Error fetching message with ID ${id}:`, error?.response?.data?.message);
      } else {
        console.error(error);
      }
      return null;
    }
  }

  async create(messageData) {
    try {
      // Only include updateable fields
      const params = {
        records: [{
          Name: messageData.Name || "Message",
          Tags: messageData.Tags || "",
          message_text_c: messageData.message_text_c || messageData.messageText,
          occasion_c: messageData.occasion_c || messageData.occasion,
          language_c: messageData.language_c || messageData.language,
          tone_c: messageData.tone_c || messageData.tone,
          created_at_c: messageData.created_at_c || new Date().toISOString()
        }]
      };

      const response = await this.apperClient.createRecord(this.tableName, params);
      
      if (!response.success) {
        console.error(response.message);
        toast.error(response.message);
        return null;
      }

      if (response.results) {
        const successfulRecords = response.results.filter(result => result.success);
        const failedRecords = response.results.filter(result => !result.success);
        
        if (failedRecords.length > 0) {
          console.error(`Failed to create message library ${failedRecords.length} records:${JSON.stringify(failedRecords)}`);
          
          failedRecords.forEach(record => {
            record.errors?.forEach(error => {
              toast.error(`${error.fieldLabel}: ${error}`);
            });
            if (record.message) toast.error(record.message);
          });
        }
        
        return successfulRecords.length > 0 ? successfulRecords[0].data : null;
      }
    } catch (error) {
      if (error?.response?.data?.message) {
        console.error("Error creating message:", error?.response?.data?.message);
      } else {
        console.error(error);
      }
      return null;
    }
  }

  async update(id, messageData) {
    try {
      // Only include updateable fields
      const params = {
        records: [{
          Id: parseInt(id),
          Name: messageData.Name || "Message",
          Tags: messageData.Tags || "",
          message_text_c: messageData.message_text_c || messageData.messageText,
          occasion_c: messageData.occasion_c || messageData.occasion,
          language_c: messageData.language_c || messageData.language,
          tone_c: messageData.tone_c || messageData.tone,
          created_at_c: messageData.created_at_c || new Date().toISOString()
        }]
      };

      const response = await this.apperClient.updateRecord(this.tableName, params);
      
      if (!response.success) {
        console.error(response.message);
        toast.error(response.message);
        return null;
      }

      if (response.results) {
        const successfulUpdates = response.results.filter(result => result.success);
        const failedUpdates = response.results.filter(result => !result.success);
        
        if (failedUpdates.length > 0) {
          console.error(`Failed to update message library ${failedUpdates.length} records:${JSON.stringify(failedUpdates)}`);
          
          failedUpdates.forEach(record => {
            record.errors?.forEach(error => {
              toast.error(`${error.fieldLabel}: ${error}`);
            });
            if (record.message) toast.error(record.message);
          });
        }
        
        return successfulUpdates.length > 0 ? successfulUpdates[0].data : null;
      }
    } catch (error) {
      if (error?.response?.data?.message) {
        console.error("Error updating message:", error?.response?.data?.message);
      } else {
        console.error(error);
      }
      return null;
    }
  }

  async delete(id) {
    try {
      const params = {
        RecordIds: [parseInt(id)]
      };

      const response = await this.apperClient.deleteRecord(this.tableName, params);
      
      if (!response.success) {
        console.error(response.message);
        toast.error(response.message);
        return false;
      }

      if (response.results) {
        const successfulDeletions = response.results.filter(result => result.success);
        const failedDeletions = response.results.filter(result => !result.success);
        
        if (failedDeletions.length > 0) {
          console.error(`Failed to delete message library ${failedDeletions.length} records:${JSON.stringify(failedDeletions)}`);
          
          failedDeletions.forEach(record => {
            if (record.message) toast.error(record.message);
          });
        }
        
        return successfulDeletions.length > 0;
      }
    } catch (error) {
      if (error?.response?.data?.message) {
        console.error("Error deleting message:", error?.response?.data?.message);
      } else {
        console.error(error);
      }
      return false;
    }
  }

  async generateMessage(occasion, language, tone, userInput = null) {
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Enhanced AI-generated messages with voice input support
    if (userInput && userInput.trim()) {
      // Generate AI content based on user's voice/text input
      return await this.generateAIMessage(userInput, occasion, language, tone);
    }

    // Enhanced message templates with more variety
    const messageTemplates = {
      "Festival Greeting": {
        "English": {
          "Formal": "We extend our warmest wishes to you and your family on this auspicious occasion. {voter_name}, may this festival bring prosperity, peace, and happiness to your home. Your community stands with you in celebration.",
          "Casual": "Hey {voter_name}! ЁЯОЙ Hope you're having an amazing celebration with your loved ones. May this festival fill your home with joy, laughter, and sweet memories. Enjoy every moment!",
          "Inspirational": "Dear {voter_name}, as we celebrate this beautiful festival, let's remember that unity and joy make our community stronger. May this occasion inspire us to support one another and build bridges of understanding. Together, we shine brighter!",
          "Voice-Generated": "Celebrating with you, {voter_name}! This festival reminds us of the beautiful diversity in our community. May your celebrations be filled with love, prosperity, and the company of those you cherish most."
        },
        "Marathi": {
          "Formal": "рдпрд╛ рд╢реБрдн рдЕрд╡рд╕рд░рд╛рд╡рд░ рдЖрдкрд▓реНрдпрд╛ рдЖрдгрд┐ рдЖрдкрд▓реНрдпрд╛ рдХреБрдЯреБрдВрдмрд╛рд▓рд╛ рдордирд╛рдкрд╛рд╕реВрди рд╢реБрднреЗрдЪреНрдЫрд╛. {voter_name}, рд╣рд╛ рд╕рдг рдЖрдкрд▓реНрдпрд╛ рдШрд░рд╛рдд рд╕рдореГрджреНрдзреА, рд╢рд╛рдВрддреА рдЖрдгрд┐ рдЖрдирдВрдж рдЖрдгреЛ. рдЖрдкрд▓рд╛ рд╕рдореБрджрд╛рдп рдЖрдкрд▓реНрдпрд╛ рд╕реЛрдмрдд рдЙрддреНрд╕рд╡ рд╕рд╛рдЬрд░рд╛ рдХрд░рдд рдЖрд╣реЗ.",
          "Casual": "рдЕрд░реЗ {voter_name}! ЁЯОЙ рддреБрдордЪрд╛ рд╕рдг рдХрд╕рд╛ рдЬрд╛рдд рдЖрд╣реЗ? рдЦреВрдк рдЖрдирдВрдж рдХрд░рд╛ рдЖрдгрд┐ рдорд┐рдард╛рдИ рдЦрд╛! рд╣рд╛ рд╕рдг рддреБрдордЪреНрдпрд╛ рдШрд░рд╛рдд рдЖрдирдВрдж рдЖрдгрд┐ рдЧреЛрдб рдЖрдард╡рдгреА рднрд░реВрди рдЬрд╛рдУ!",
          "Inspirational": "рдкреНрд░рд┐рдп {voter_name}, рдпрд╛ рд╕реБрдВрджрд░ рд╕рдгрд╛рдЪреНрдпрд╛ рдирд┐рдорд┐рддреНрддрд╛рдиреЗ рдЖрдкрдг рд╕рдЧрд│реЗ рдорд┐рд│реВрди рдЖрдкрд▓реНрдпрд╛ рд╕рдорд╛рдЬрд╛рд▓рд╛ рдордЬрдмреВрдд рдмрдирд╡реВрдпрд╛! рд╣рд╛ рд╕рдг рдЖрдкрд▓реНрдпрд╛рд▓рд╛ рдПрдХрдореЗрдХрд╛рдВрдирд╛ рд╕рд╛рде рджреЗрдгреНрдпрд╛рд╕рд╛рдареА рдкреНрд░реЗрд░рдгрд╛ рджреЗрддреЛ. рдПрдХрддреНрд░ рдЖрдкрдг рдЕрдзрд┐рдХ рддреЗрдЬрд╕реНрд╡реА рд╣реЛрддреЛ!",
          "Voice-Generated": "{voter_name}, рддреБрдордЪреНрдпрд╛рд╕реЛрдмрдд рд╕рдг рд╕рд╛рдЬрд░рд╛ рдХрд░рдд рдЖрд╣реЛрдд! рд╣рд╛ рд╕рдг рдЖрдкрд▓реНрдпрд╛ рд╕рдореБрджрд╛рдпрд╛рддреАрд▓ рд╕реБрдВрджрд░ рд╡рд┐рд╡рд┐рдзрддреЗрдЪреА рдЖрдард╡рдг рдХрд░реВрди рджреЗрддреЛ. рддреБрдордЪрд╛ рдЙрддреНрд╕рд╡ рдкреНрд░реЗрдо, рд╕рдореГрджреНрдзреА рдЖрдгрд┐ рдкреНрд░рд┐рдп рд╡реНрдпрдХреНрддреАрдВрдЪреНрдпрд╛ рд╕рд╣рд╡рд╛рд╕рд╛рдиреЗ рднрд░рд▓реЗрд▓рд╛ рдЬрд╛рдУ."
        }
      },
      "Event Invite": {
        "English": {
          "Formal": "Dear {voter_name}, You are cordially invited to attend our upcoming community event. Your presence would be highly valued as we discuss matters important to our neighborhood's future. Together, we can make a difference.",
          "Casual": "Hi {voter_name}! ЁЯСЛ Got an awesome community event coming up - would love to see you there! We'll have great discussions, refreshments, and a chance to connect with neighbors. Don't miss out!",
          "Inspirational": "Join us, {voter_name}, as we come together to build a better tomorrow for our community! Your voice, your ideas, and your presence can help shape positive change. Every participation matters!",
          "Voice-Generated": "{voter_name}, we're hosting a special community gathering and your unique perspective would enrich our discussions. Come be part of the solution and help us create positive change together."
        },
        "Marathi": {
          "Formal": "рдЖрджрд░рдгреАрдп {voter_name}, рдЖрдкрд▓реНрдпрд╛рд▓рд╛ рдЖрдордЪреНрдпрд╛ рдпреЗрддреНрдпрд╛ рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рдХрд╛рд░реНрдпрдХреНрд░рдорд╛рд╕ рдЙрдкрд╕реНрдерд┐рдд рд░рд╛рд╣рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдордВрддреНрд░рд┐рдд рдХрд░рддреЛ. рдЖрдкрд▓реНрдпрд╛ рдкрд░рд┐рд╕рд░рд╛рдЪреНрдпрд╛ рднрд╡рд┐рд╖реНрдпрд╛рд╢реА рд╕рдВрдмрдВрдзрд┐рдд рдорд╣рддреНрд╡рд╛рдЪреНрдпрд╛ рдЧреЛрд╖реНрдЯреАрдВрд╡рд░ рдЪрд░реНрдЪрд╛ рдХрд░рддрд╛рдирд╛ рдЖрдкрд▓реА рдЙрдкрд╕реНрдерд┐рддреА рдЕрддреНрдпрдВрдд рдореЛрд▓рд╛рдЪреА рдЕрд╕реЗрд▓.",
          "Casual": "рдЕрд░реЗ {voter_name}! рдПрдХ рдЫрд╛рди рд╕рдореБрджрд╛рдпрд┐рдХ рдХрд╛рд░реНрдпрдХреНрд░рдо рдпреЗрдд рдЖрд╣реЗ - рддреБрдореНрд╣реА рдирдХреНрдХреА рдпрд╛! рдЪрд╛рдВрдЧрд▓реА рдЪрд░реНрдЪрд╛, рдирд╛рд╢реНрддрд╛ рдЖрдгрд┐ рд╢реЗрдЬрд╛рд▒реНрдпрд╛рдВрд╢реА рднреЗрдЯрдгреНрдпрд╛рдЪреА рд╕рдВрдзреА рдорд┐рд│реЗрд▓. рдЪреБрдХрд╡реВ рдирдХрд╛!",
          "Inspirational": "{voter_name}, рдЖрдкрд▓реНрдпрд╛ рд╕рдорд╛рдЬрд╛рдЪреЗ рдЪрд╛рдВрдЧрд▓реЗ рднрд╡рд┐рд╖реНрдп рдШрдбрд╡рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдордЪреНрдпрд╛рд╕реЛрдмрдд рд╕рд╛рдореАрд▓ рд╡реНрд╣рд╛! рддреБрдордЪрд╛ рдЖрд╡рд╛рдЬ, рддреБрдордЪреНрдпрд╛ рдХрд▓реНрдкрдирд╛ рдЖрдгрд┐ рддреБрдордЪреА рдЙрдкрд╕реНрдерд┐рддреА рд╕рдХрд╛рд░рд╛рддреНрдордХ рдмрджрд▓ рдШрдбрд╡реВ рд╢рдХрддреЗ. рдкреНрд░рддреНрдпреЗрдХ рд╕рд╣рднрд╛рдЧ рдорд╣рддреНрд╡рд╛рдЪрд╛ рдЖрд╣реЗ!",
          "Voice-Generated": "{voter_name}, рдЖрдореНрд╣реА рдПрдХ рд╡рд┐рд╢реЗрд╖ рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рдореЗрд│рд╛рд╡рд╛ рдЖрдпреЛрдЬрд┐рдд рдХрд░рдд рдЖрд╣реЛрдд рдЖрдгрд┐ рддреБрдордЪрд╛ рдЕрдиреЛрдЦрд╛ рджреГрд╖реНрдЯрд┐рдХреЛрди рдЖрдордЪреНрдпрд╛ рдЪрд░реНрдЪреЗрд▓рд╛ рд╕рдореГрджреНрдз рдХрд░реЗрд▓. рд╕рдорд╛рдзрд╛рдирд╛рдЪрд╛ рднрд╛рдЧ рдмрдирд╛ рдЖрдгрд┐ рдЖрдордЪреНрдпрд╛рд╕реЛрдмрдд рд╕рдХрд╛рд░рд╛рддреНрдордХ рдмрджрд▓ рдШрдбрд╡реВрдпрд╛."
        }
      },
      "General Update": {
        "English": {
          "Formal": "Dear {voter_name}, We would like to update you on the recent developments in our community initiatives. Your continued support has been instrumental in achieving these milestones. Thank you for being an engaged citizen.",
          "Casual": "Hey {voter_name}! Quick update on what's happening in our neighborhood ЁЯУв Some really cool progress to share with you! Thanks for being such an awesome community member.",
          "Inspirational": "{voter_name}, together we're making real progress! Here's what we've accomplished recently with your support. Every small step forward is a victory for our community. Keep up the amazing spirit!",
          "Voice-Generated": "Hello {voter_name}, exciting updates from our community! Thanks to residents like you, we're seeing positive changes take root. Your involvement makes all the difference in building the neighborhood we all want to live in."
        },
        "Marathi": {
          "Formal": "рдЖрджрд░рдгреАрдп {voter_name}, рдЖрдордЪреНрдпрд╛ рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рдЙрдкрдХреНрд░рдорд╛рдВрдордзреАрд▓ рдЕрд▓реАрдХрдбреАрд▓ рдШрдбрд╛рдореЛрдбреАрдВрдЪреА рдорд╛рд╣рд┐рддреА рджреЗрдд рдЖрд╣реЛрдд. рдпрд╛ рдпрд╢рд╛рдордзреНрдпреЗ рддреБрдордЪреНрдпрд╛ рд╕рддрдд рдкрд╛рдард┐рдВрдмреНрдпрд╛рдЪрд╛ рдореЛрдард╛ рд╡рд╛рдЯрд╛ рдЖрд╣реЗ. рдПрдХ рдЬрдмрд╛рдмрджрд╛рд░ рдирд╛рдЧрд░рд┐рдХ рдореНрд╣рдгреВрди рддреБрдордЪреЗ рдЖрднрд╛рд░.",
          "Casual": "рдЕрд░реЗ {voter_name}! рдЖрдордЪреНрдпрд╛ рдкрд░рд┐рд╕рд░рд╛рдд рдХрд╛рдп рдЪрд╛рд▓реВ рдЖрд╣реЗ рддреЗ рд╕рд╛рдВрдЧрддреЛ ЁЯУв рдХрд╛рд╣реА рдЦрд░реЛрдЦрд░ рдЫрд╛рди рдкреНрд░рдЧрддреА рддреБрдордЪреНрдпрд╛рд╕реЛрдмрдд рд╢реЗрдЕрд░ рдХрд░рд╛рдпрдЪреА рдЖрд╣реЗ! рддреБрдореНрд╣реА рдЗрддрдХреЗ рдЫрд╛рди рд╕рдореБрджрд╛рдпрд┐рдХ рд╕рджрд╕реНрдп рдЖрд╣рд╛рдд рдореНрд╣рдгреВрди рдзрдиреНрдпрд╡рд╛рдж.",
          "Inspirational": "{voter_name}, рдЖрдкрдг рд╕рдЧрд│реЗ рдорд┐рд│реВрди рдЦрд░реЛрдЦрд░ рдкреНрд░рдЧрддреА рдХрд░рдд рдЖрд╣реЛрдд! рддреБрдордЪреНрдпрд╛ рдкрд╛рдард┐рдВрдмреНрдпрд╛рдиреЗ рдЕрд▓реАрдХрдбреЗрдЪ рдЖрдкрдг рдЬреЗ рд╕рд╛рдзреНрдп рдХреЗрд▓реЗ рдЖрд╣реЗ рддреЗ рдкрд╛рд╣рд╛. рдкреБрдвреЗ рдЯрд╛рдХрд▓реЗрд▓реЗ рдкреНрд░рддреНрдпреЗрдХ рдЫреЛрдЯреЗ рдкрд╛рдКрд▓ рдЖрдкрд▓реНрдпрд╛ рд╕рдореБрджрд╛рдпрд╛рд╕рд╛рдареА рд╡рд┐рдЬрдп рдЖрд╣реЗ. рддреБрдордЪрд╛ рдЕрджреНрднреБрдд рдЙрддреНрд╕рд╛рд╣ рдХрд╛рдпрдо рдареЗрд╡рд╛!",
          "Voice-Generated": "рдирдорд╕реНрдХрд╛рд░ {voter_name}, рдЖрдордЪреНрдпрд╛ рд╕рдореБрджрд╛рдпрд╛рдХрдбреВрди рд░реЛрдорд╛рдВрдЪрдХ рдЕрдкрдбреЗрдЯреНрд╕! рддреБрдордЪреНрдпрд╛рд╕рд╛рд░рдЦреНрдпрд╛ рд░рд╣рд┐рд╡рд╛рд╢рд╛рдВрдореБрд│реЗ рдЖрдореНрд╣реА рд╕рдХрд╛рд░рд╛рддреНрдордХ рдмрджрд▓ рдкрд╛рд╣рдд рдЖрд╣реЛрдд. рдЖрдореНрд╣рд╛ рд╕рд░реНрд╡рд╛рдВрдирд╛ рд░рд╛рд╣рд╛рдпрдЪрд╛ рдкрд░рд┐рд╕рд░ рдирд┐рд░реНрдорд╛рдг рдХрд░рдгреНрдпрд╛рдд рддреБрдордЪрд╛ рд╕рд╣рднрд╛рдЧ рд╕рд░реНрд╡ рдлрд░рдХ рдХрд░рддреЛ."
        }
      },
      "Voice Input Custom": {
        "English": {
          "Formal": "Dear {voter_name}, based on community input and feedback, we are implementing new initiatives that address your specific concerns and suggestions.",
          "Casual": "Hey {voter_name}! We heard you loud and clear! ЁЯУг Here's what we're doing about the things you mentioned.",
          "Inspirational": "{voter_name}, your voice sparked action! Together, we're turning community input into real solutions that benefit everyone.",
          "Voice-Generated": "Thank you, {voter_name}, for sharing your thoughts with us. Your input is helping shape our community initiatives in meaningful ways."
        }
      }
    };

    // Enhanced selection with fallback
    const selectedTemplate = messageTemplates[occasion]?.[language]?.[tone] || 
      messageTemplates[occasion]?.[language]?.["Formal"] ||
      messageTemplates["General Update"]?.[language]?.[tone] ||
      `Dear {voter_name}, thank you for your continued support and engagement with our community initiatives. Your participation makes our community stronger.`;

    return selectedTemplate;
  }

  async generateAIMessage(userInput, occasion, language, tone) {
    // Simulate AI processing of voice/text input to generate personalized messages
    await new Promise(resolve => setTimeout(resolve, 800));

    const toneAdjustments = {
      "Formal": "respectful and professional",
      "Casual": "friendly and approachable", 
      "Inspirational": "motivational and uplifting",
      "Voice-Generated": "personalized and engaging"
    };

    const languageGreetings = {
      "English": "Dear {voter_name}",
      "Marathi": "рдЖрджрд░рдгреАрдп {voter_name}",
      "Hindi": "рдкреНрд░рд┐рдп {voter_name}"
    };

    const greeting = languageGreetings[language] || languageGreetings["English"];

    // Process user input to generate contextual message
    let aiGeneratedContent = "";
    
    if (userInput.toLowerCase().includes('festival') || userInput.toLowerCase().includes('celebration')) {
      aiGeneratedContent = language === "Marathi" ? 
        `${greeting}, рддреБрдордЪреНрдпрд╛ рд╕реБрдВрджрд░ рд╡рд┐рдЪрд╛рд░рд╛рдВрдиреБрд╕рд╛рд░ рд╣рд╛ рд╕рдг рдЖрдирдВрджрд╛рдиреЗ рд╕рд╛рдЬрд░рд╛ рдХрд░реВрдпрд╛! рддреБрдордЪреНрдпрд╛ рд╕реБрдЭрд╛рд╡рд╛рдиреБрд╕рд╛рд░ рдЖрдореНрд╣реА рд╕рдореБрджрд╛рдпрд┐рдХ рдЙрддреНрд╕рд╡рд╛рдЪреА рдпреЛрдЬрдирд╛ рдХрд░рдд рдЖрд╣реЛрдд.` :
        `${greeting}, based on your wonderful thoughts about celebrations, let's make this festival truly special! We're planning community festivities inspired by your suggestions.`;
    } else if (userInput.toLowerCase().includes('community') || userInput.toLowerCase().includes('together')) {
      aiGeneratedContent = language === "Marathi" ?
        `${greeting}, рддреБрдордЪреНрдпрд╛ рд╕рдореБрджрд╛рдпрдкреНрд░реЗрдореА рд╡рд┐рдЪрд╛рд░рд╛рдВрдореБрд│реЗ рдЖрдореНрд╣рд╛рд▓рд╛ рдкреНрд░реЗрд░рдгрд╛ рдорд┐рд│рддреЗ! рдПрдХрддреНрд░ рдорд┐рд│реВрди рдЖрдкрдг рдЪрд╛рдВрдЧрд▓реЗ рдХрд╛рдо рдХрд░реВ рд╢рдХрддреЛ.` :
        `${greeting}, your community-focused thoughts inspire us all! Together, we can achieve great things for our neighborhood.`;
    } else if (userInput.toLowerCase().includes('help') || userInput.toLowerCase().includes('support')) {
      aiGeneratedContent = language === "Marathi" ?
        `${greeting}, рддреБрдордЪреНрдпрд╛ рдорджрддреАрдЪреНрдпрд╛ рднрд╛рд╡рдиреЗрдмрджреНрджрд▓ рдзрдиреНрдпрд╡рд╛рдж! рдЖрдордЪреНрдпрд╛ рд╕рдореБрджрд╛рдпрд╛рдд рддреБрдордЪреНрдпрд╛рд╕рд╛рд░рдЦреА рд╡реНрдпрдХреНрддреА рдЕрд╕рд▓реНрдпрд╛рдореБрд│реЗ рдЖрдореНрд╣реА рднрд╛рдЧреНрдпрд╡рд╛рди рдЖрд╣реЛрдд.` :
        `${greeting}, thank you for your spirit of support and assistance! We're fortunate to have community members like you.`;
    } else {
      // General AI response based on tone
      const responses = {
        "English": {
          "Formal": `${greeting}, your valuable input has been carefully considered. We appreciate your thoughtful contribution: "${userInput}". Our team is working to address these important points.`,
          "Casual": `${greeting}, thanks for sharing your thoughts! ЁЯШК We really appreciate your input: "${userInput}". Let's work together on this!`,
          "Inspirational": `${greeting}, your words inspire action! "${userInput}" - this is exactly the kind of engaged thinking our community needs. Together, we'll make it happen!`,
          "Voice-Generated": `${greeting}, based on your input: "${userInput}", we're excited to work together on solutions that benefit everyone in our community.`
        },
        "Marathi": {
          "Formal": `${greeting}, рддреБрдордЪреНрдпрд╛ рдореМрд▓реНрдпрд╡рд╛рди рд╕реБрдЭрд╛рд╡рд╛рдВрдЪрд╛ рдХрд╛рд│рдЬреАрдкреВрд░реНрд╡рдХ рд╡рд┐рдЪрд╛рд░ рдХреЗрд▓рд╛ рдЖрд╣реЗ. рддреБрдордЪреНрдпрд╛ рд╡рд┐рдЪрд╛рд░рд╢реАрд▓ рдпреЛрдЧрджрд╛рдирд╛рдмрджреНрджрд▓ рдЖрдореНрд╣реА рдХреГрддрдЬреНрдЮ рдЖрд╣реЛрдд: "${userInput}". рдЖрдордЪреА рдЯреАрдо рдпрд╛ рдорд╣рддреНрд╡рд╛рдЪреНрдпрд╛ рдореБрджреНрджреНрдпрд╛рдВрд╡рд░ рдХрд╛рдо рдХрд░рдд рдЖрд╣реЗ.`,
          "Casual": `${greeting}, рддреБрдордЪреЗ рд╡рд┐рдЪрд╛рд░ рд╢реЗрдЕрд░ рдХреЗрд▓реНрдпрд╛рдмрджреНрджрд▓ рдзрдиреНрдпрд╡рд╛рдж! ЁЯШК рддреБрдордЪреНрдпрд╛ рд╕реБрдЭрд╛рд╡рд╛рдВрдЪреА рдЖрдореНрд╣рд╛рд▓рд╛ рдЦрд░реЛрдЦрд░ рдХрджрд░ рдЖрд╣реЗ: "${userInput}". рдпрд╛рд╡рд░ рдПрдХрддреНрд░ рдХрд╛рдо рдХрд░реВрдпрд╛!`,
          "Inspirational": `${greeting}, рддреБрдордЪреЗ рд╢рдмреНрдж рдХреГрддреАрд▓рд╛ рдкреНрд░реЗрд░рдгрд╛ рджреЗрддрд╛рдд! "${userInput}" - рдЖрдкрд▓реНрдпрд╛ рд╕рдореБрджрд╛рдпрд╛рд▓рд╛ рдЕрд╢рд╛рдЪ рд╕рд╣рднрд╛рдЧреА рд╡рд┐рдЪрд╛рд░рд╕рд░рдгреАрдЪреА рдЧрд░рдЬ рдЖрд╣реЗ. рдПрдХрддреНрд░ рдорд┐рд│реВрди рдЖрдкрдг рд╣реЗ рд╕рд╛рдХрд╛рд░ рдХрд░реВ!`,
          "Voice-Generated": `${greeting}, рддреБрдордЪреНрдпрд╛ рд╕реБрдЭрд╛рд╡рд╛рдВрдЪреНрдпрд╛ рдЖрдзрд╛рд░реЗ: "${userInput}", рдЖрдореНрд╣реА рдЖрдордЪреНрдпрд╛ рд╕рдореБрджрд╛рдпрд╛рддреАрд▓ рд╕рд░реНрд╡рд╛рдВрдЪреНрдпрд╛ рдлрд╛рдпрджреНрдпрд╛рд╕рд╛рдареА рдЙрдкрд╛рдпрдпреЛрдЬрдирд╛рдВрд╡рд░ рдПрдХрддреНрд░ рдХрд╛рдо рдХрд░рдгреНрдпрд╛рд╕ рдЙрддреНрд╕реБрдХ рдЖрд╣реЛрдд.`
        }
      };

      aiGeneratedContent = responses[language]?.[tone] || responses["English"][tone] || responses["English"]["Formal"];
    }

    return aiGeneratedContent;
  }
}

export default new MessageLibraryService();